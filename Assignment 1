# Compiler-Construction-JAVACC-

options { JAVA_UNICODE_ESCAPE = true; }

PARSER_BEGIN(SLPTokeniser)
public class SLPTokeniser {
	public static void main(String args[]) {
		SLPTokeniser tokeniser;
		if (args.length == 0) {
			System.out.println("Reading from standard input . . .");
			tokeniser = new SLPTokeniser(System.in);
		} else if (args.length == 1) {
			try {
				tokeniser = new SLPTokeniser(new java.io.FileInputStream(args[0]));
			} catch (java.io.FileNotFoundException e) {
				System.err.println("File " + args[0] + " not found.");
				return;
			}
		}
		else {
			System.out.println("SLP Tokeniser: Usage is one of:");
			System.out.println(" java SLPTokeniser < inputfile");
			System.out.println("OR");
			System.out.println(" java SLPTokeniser inputfile");
			return;
		}
		for (Token t = getNextToken(); t.kind!=EOF; t = getNextToken()) {
			// Print out the actual text for the constants, identifiers etc.
			if (t.kind==NUM){
				System.out.print("Number");
				System.out.print("("+t.image+") ");
			}
			else if (t.kind==ID){
				System.out.print("Identifier");
				System.out.print("("+t.image+") ");
			}
			else
				System.out.print(t.image+" ");
		}
	}
}
PARSER_END(SLPTokeniser)

// TOKEN DEFINTIONS

TOKEN_MGR_DECLS :
{
	static int commentNesting = 0;
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
	" "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}

SKIP : /* COMMENTS */
{
	"/*" { commentNesting++; } : IN_COMMENT
}

<IN_COMMENT> SKIP :
{
	"/*" { commentNesting++; }
	| "*/" { commentNesting--;
		if (commentNesting == 0)
			SwitchTo(DEFAULT);
		}
	| <~[]>
}

TOKEN :  /* KEYWORDS */
{	<AND : "and">
	|<BOOL : "bool">
	|<CONST : "const">
	|<DO : "do">
	|<ELSE : "else">
	|<FALSE : "false">
	|<IF : "if">
	|<INT : "int">
	|<MAIN : "main">
	|<NOT : "not">
	|<OR : "or">
	|<RETURN : "return">
	|<TRUE : "true">
	|<VOID : "void">
	|<WHILE : "while">
	|<BEGIN : "begin">
	|<END : "end">
}

TOKEN :  /* OPERATORS RELATIONS */
{	<ADD : "+">
	|<SUBTRACT : "-">
	|<MULTIPLY : "*">
	|<DIVIDE : "/">
	|<EQUAL : "=">
	|<NOTEQUAL : "!=">
	|<LESSTHAN : "<">
	|<GREATERTHAN : ">">
	|<LESSTHANEQUAL : "<=">
	|GREATERTHANEQUAL : ">=">
	|<LBRACE : "(">
	|<RBRACE : ")">
	|<COMMA : ",">
	|<SEMICOLON : ";">
	|<COLON : ":">
	|<ASSIGN : ":=">
}

TOKEN : /* NUMBERS AND IDENTIFIERS */
{
	< NUM : (<DIGIT>)+ >
	| < #DIGIT : ["0" - "9"] >
	| < ID : (<LETTER>)+ >
	| < #LETTER : ["a" - "z", "A" - "Z"] >
	//| < IDENTIFIER : (<DIGIT>|<LETTER>|"_") >
	| < #UNDERSCORE : ["_"] >
}

TOKEN : /* ANYTHING NOT RECOGNISED SO FAR */
{
	< OTHER : ~[] >
}

 
