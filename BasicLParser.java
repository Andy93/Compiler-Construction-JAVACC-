/* Generated By:JavaCC: Do not edit this line. BasicLParser.java */
public class BasicLParser implements BasicLParserConstants {
    public static void main(String [] args){
        BasicLParser parser;
        if(args.length == 0){
            System.out.println("BasicLParser: Reading from Standard Input...");
            parser = new BasicLParser(System.in);
        }
        else if(args.length == 1){
            System.out.println("BasicLParser: Reading from file " + args[0] + "...");
            try{
                parser = new BasicLParser(new java.io.FileInputStream(args[0]));
            }
            catch(java.io.FileNotFoundException e){
                System.out.println("BasicLParser: File " + args[0] + "  not found");
                return;
            }
        }
        else{
        System.out.println("BasicLParser: Usage is one of : ");
        System.out.println("\u005ct\u005ct java BasicLParser < inputFile");
        System.out.println("OR");
        System.out.println("\u005ct\u005ct java BasicLParser inputFile");
        return;
        }
        try
        {
          parser.program();
        }catch(ParseException e){
          System.out.println(e.getMessage());
                  return;
        }
    }

// ** SECTION 4 - Grammar Rules **
  static final public void program() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
      case VAR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      decl();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL:
      case INT:
      case VOID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      function();
    }
    main_prog();
  }

  static final public void decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      var_decl();
      break;
    case CONST:
      const_decl();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void var_decl() throws ParseException {
    jj_consume_token(VAR);
    ident_list();
    jj_consume_token(COLON);
    type();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      ident_list();
      jj_consume_token(COLON);
      type();
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void const_decl() throws ParseException {
    jj_consume_token(CONST);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    type();
    jj_consume_token(EQUAL);
    expression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      type();
      jj_consume_token(EQUAL);
      expression();
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void function() throws ParseException {
    type();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACKET);
    param_list();
    jj_consume_token(RBRACKET);
    jj_consume_token(BEGIN);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
      case VAR:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      decl();
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case BEGIN:
      case EPSILON:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      statement();
      jj_consume_token(SEMICOLON);
    }
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NOT:
    case TRUE:
    case ADD:
    case SUBTRACT:
    case LBRACKET:
    case IDENTIFIER:
    case NUMBER:
      expression();
      break;
    case EPSILON:
      jj_consume_token(EPSILON);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
    jj_consume_token(END);
  }

  static final public void param_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      type();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(COLON);
        type();
      }
      break;
    case EPSILON:
      jj_consume_token(EPSILON);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case BOOL:
      jj_consume_token(BOOL);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void main_prog() throws ParseException {
    jj_consume_token(MAIN);
    jj_consume_token(BEGIN);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
      case VAR:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_8;
      }
      decl();
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case BEGIN:
      case EPSILON:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_9;
      }
      statement();
      jj_consume_token(SEMICOLON);
    }
    jj_consume_token(END);
  }

/*
statement := identifier := expression
                | identifier ( arg_list )
                | BEGIN ( statement ; )* END
                | IF condition THEN statement ; ELSE statement
                | WHILE condition DO statement
                | Îµ 
*/
  static final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        expression();
        break;
      case EPSILON:
      case IDENTIFIER:
        arg_list();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case BEGIN:
      jj_consume_token(BEGIN);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case BEGIN:
        case EPSILON:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_10;
        }
        statement();
        jj_consume_token(SEMICOLON);
      }
      jj_consume_token(END);
      break;
    case IF:
      jj_consume_token(IF);
      condition();
      jj_consume_token(THEN);
      statement();
      jj_consume_token(SEMICOLON);
      jj_consume_token(ELSE);
      statement();
      break;
    case WHILE:
      jj_consume_token(WHILE);
      condition();
      jj_consume_token(DO);
      statement();
      break;
    case EPSILON:
      jj_consume_token(EPSILON);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
expression := fragment ( ( + | - | * | / )  fragment )*
                | ( expression ) 
                | identifier ( arg_list )
*/
  static final public void expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case ADD:
    case SUBTRACT:
    case IDENTIFIER:
    case NUMBER:
      fragment();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
        case SUBTRACT:
        case MULTIPLY:
        case DIVIDE:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
          jj_consume_token(ADD);
          break;
        case SUBTRACT:
          jj_consume_token(SUBTRACT);
          break;
        case MULTIPLY:
          jj_consume_token(MULTIPLY);
          break;
        case DIVIDE:
          jj_consume_token(DIVIDE);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        condition();
      }
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      expression();
      jj_consume_token(RBRACKET);
      break;
    case NOT:
      jj_consume_token(NOT);
      expression();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//fragment := identifier | TRUE | FALSE | number | ( + | - ) fragment | expression
  static final public void fragment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EPSILON:
      case IDENTIFIER:
        arg_list();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
      break;
    case ADD:
    case SUBTRACT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        jj_consume_token(ADD);
        break;
      case SUBTRACT:
        jj_consume_token(SUBTRACT);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      fragment();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//condition :=    NOT condition
//                | expression ( = | != | < | > | <= | >= ) expression
//                | condition (AND | OR) condition
//                | identifier ( arg_list )
  static final public void condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      condition();
      break;
    case FALSE:
    case TRUE:
    case ADD:
    case SUBTRACT:
    case LBRACKET:
    case IDENTIFIER:
    case NUMBER:
      expression();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case FALSE:
        case NOT:
        case OR:
        case TRUE:
        case ADD:
        case SUBTRACT:
        case EQUAL:
        case NOTEQUAL:
        case LESSTHAN:
        case GREATERTHAN:
        case LESSTHANEQUAL:
        case GREATERTHANEQUAL:
        case LBRACKET:
        case IDENTIFIER:
        case NUMBER:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
        case NOTEQUAL:
        case LESSTHAN:
        case GREATERTHAN:
        case LESSTHANEQUAL:
        case GREATERTHANEQUAL:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EQUAL:
            jj_consume_token(EQUAL);
            break;
          case NOTEQUAL:
            jj_consume_token(NOTEQUAL);
            break;
          case LESSTHAN:
            jj_consume_token(LESSTHAN);
            break;
          case GREATERTHAN:
            jj_consume_token(GREATERTHAN);
            break;
          case GREATERTHANEQUAL:
            jj_consume_token(GREATERTHANEQUAL);
            break;
          case LESSTHANEQUAL:
            jj_consume_token(LESSTHANEQUAL);
            break;
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case AND:
        case OR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
            jj_consume_token(AND);
            break;
          case OR:
            jj_consume_token(OR);
            break;
          default:
            jj_la1[24] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case FALSE:
        case NOT:
        case TRUE:
        case ADD:
        case SUBTRACT:
        case LBRACKET:
        case IDENTIFIER:
        case NUMBER:
          condition();
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//ident_list := identifier ( , identifier )*
  static final public void ident_list() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
    }
  }

//arg_list := ( identifier ( , identifier )* | Îµ  )
  static final public void arg_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_14;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
      }
      break;
    case EPSILON:
      jj_consume_token(EPSILON);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public BasicLParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2002000,0x4041000,0x2002000,0x0,0x0,0x2002000,0x18020000,0xc1110000,0x0,0x0,0x4041000,0x2002000,0x18020000,0x0,0x18020000,0x18020000,0xc0000000,0xc0000000,0xc1110000,0x0,0xc0000000,0xc1010000,0xc1310800,0x0,0x200800,0xc1310800,0xc1110000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x400,0x400,0x0,0xc000,0x8c100,0x400,0xc000,0x0,0x0,0xc000,0xe000,0xc000,0xc000,0x3,0x3,0x88100,0xc000,0x0,0x88000,0x881fc,0xfc,0x0,0x881fc,0x88100,0x400,0x400,0xc000,};
   }

  /** Constructor with InputStream. */
  public BasicLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BasicLParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BasicLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public BasicLParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BasicLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public BasicLParser(BasicLParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BasicLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
